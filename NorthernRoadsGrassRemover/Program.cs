using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins;

namespace NorthernRoadsGrassRemover
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "NorthernRoadsGrassRemover.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!state.LoadOrder.TryGetValue("Northern Roads.esp", out var northernRoads) || northernRoads.Mod is null)
            {
                Console.Error.WriteLine("'Northern Roads.esp' cannot be found. Make sure you have installed Northern Roads.");
                return;
            }


            var loadOrderLinkCache = state.LoadOrder.ToImmutableLinkCache();
            var northernRoadsLinkCache = northernRoads.Mod.ToImmutableLinkCache();


            // Generate Landscape Texture records without grass, based on the ones defined in TexturesToClean
            var cleanedLandscapeTextures = GenerateCleanLandscapeTextures(loadOrderLinkCache, state.PatchMod);

            uint patchedTextureCount = 0;

            // Iterate through cells
            foreach (var cellContext in state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(loadOrderLinkCache))
            {
                // Make sure the cell is exterior
                if (!cellContext.TryGetParent<IWorldspaceGetter>(out _)) continue;

                if (HasNorthernRoadsTextures(cellContext.Record, loadOrderLinkCache, northernRoadsLinkCache))
                {
                    // Grab the cell from the last plugin where the Landscape record was defined
                    var latestCellContext = cellContext.Record
                        .ToLinkGetter()
                        .ResolveAllContexts<ISkyrimMod, ISkyrimModGetter, ICell, ICellGetter>(loadOrderLinkCache)
                        .FirstOrDefault(context => context.Record?.Landscape != null);

                    if (latestCellContext is null || latestCellContext.Record.Landscape is null) continue;

                    // Copy the Cell and Landscape record
                    var patchCell = cellContext.GetOrAddAsOverride(state.PatchMod);
                    patchCell.Landscape = latestCellContext.Record.Landscape.DeepCopy();

                    foreach (var layer in patchCell.Landscape.Layers)
                    {
                        if (layer.Header == null) continue;

                        var texture = layer.Header.Texture;
                        if (cleanedLandscapeTextures.ContainsKey(texture.FormKey))
                        {
                            layer.Header.Texture.SetTo(cleanedLandscapeTextures[texture.FormKey]);
                            patchedTextureCount++;
                        }
                    }
                };
            }

            Console.WriteLine($"Patched {patchedTextureCount} Landscape Texture records");
        }

        public static bool HasNorthernRoadsTextures(
            ICellGetter cell,
            ILinkCache<ISkyrimMod, ISkyrimModGetter> loadOrderLinkCache,
            ILinkCache<ISkyrimMod, ISkyrimModGetter> northernRoadsLinkCache
        )
        {
            foreach (var version in cell
                .ToLinkGetter()
                .ResolveAllContexts<ISkyrimMod, ISkyrimModGetter, ICell, ICellGetter>(loadOrderLinkCache))
            {
                var landscape = version.Record.Landscape;
                if (landscape == null) continue;

                foreach (var layer in landscape.Layers)
                {
                    if (layer.Header == null) continue;

                    // Check for Northern Roads Landscape Texture records in the cell
                    if (northernRoadsLinkCache.TryResolve<ILandscapeTextureGetter>(layer.Header.Texture.FormKey, out var landscapeRecord)) return true;
                }
            }

            return false;
        }

        public static Dictionary<FormKey, LandscapeTexture> GenerateCleanLandscapeTextures(
            ILinkCache<ISkyrimMod, ISkyrimModGetter> loadOrderLinkCache,
            ISkyrimMod patchMod
        )
        {
            Dictionary<FormKey, LandscapeTexture> cleanedLandscapeTextures = new Dictionary<FormKey, LandscapeTexture>();
            foreach (var landscapeTexture in Settings.Value.TexturesToClean)
            {
                // Search for original version of landscape texture
                if (!loadOrderLinkCache.TryResolve<ILandscapeTextureGetter>(landscapeTexture, out var landscapeTextureRecord) || landscapeTextureRecord.EditorID is null)
                {
                    Console.Error.WriteLine($"Cannot find landscape texture record '{landscapeTexture}'");
                    continue;
                }

                // Duplicate it
                var newLandscapeTextureRecord = patchMod.LandscapeTextures.DuplicateInAsNewRecord(landscapeTextureRecord);
                newLandscapeTextureRecord.EditorID = "NR_NoGrass_" + newLandscapeTextureRecord.EditorID;

                // Remove the grass
                newLandscapeTextureRecord.Grasses.Clear();

                // Insert new record into dictionary with the original FormKey as the key
                cleanedLandscapeTextures.Add(landscapeTextureRecord.FormKey, newLandscapeTextureRecord);
            };

            return cleanedLandscapeTextures;
        }
    }
}
